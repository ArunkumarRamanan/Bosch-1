this is fold 1
[0]	train-auc:0.922293	val-auc:0.896987
Multiple eval metrics have been passed: 'val-auc' will be used for early stopping.

Will train until val-auc hasn't improved in 20 rounds.
[10]	train-auc:0.948697	val-auc:0.910259
[20]	train-auc:0.957804	val-auc:0.911287
[30]	train-auc:0.9637	val-auc:0.909893
[40]	train-auc:0.968501	val-auc:0.910664
Stopping. Best iteration:
[20]	train-auc:0.957804	val-auc:0.911287

xgb mcc: 0.466068890575
the auc is 0.910663595848
the best threshold is 0.450353
the auc is 0.905210127214
rf mcc: 0.429870021474
the best threshold is 0.284853183166
final mcc: 0.467624513596
the auc is 0.911625278716
the best threshold is 0.347282458623
this is fold 2
[0]	train-auc:0.922513	val-auc:0.907495
Multiple eval metrics have been passed: 'val-auc' will be used for early stopping.

Will train until val-auc hasn't improved in 20 rounds.
[10]	train-auc:0.947121	val-auc:0.921555
[20]	train-auc:0.955343	val-auc:0.921264
[30]	train-auc:0.962768	val-auc:0.919297
Stopping. Best iteration:
[18]	train-auc:0.954398	val-auc:0.922122

xgb mcc: 0.436213838949
the auc is 0.919225855604
the best threshold is 0.255229
the auc is 0.916217851683
rf mcc: 0.408209401124
the best threshold is 0.318991770351
final mcc: 0.447112580963
the auc is 0.92137735933
the best threshold is 0.374903091361
this is fold 3
[0]	train-auc:0.92341	val-auc:0.905779
Multiple eval metrics have been passed: 'val-auc' will be used for early stopping.

Will train until val-auc hasn't improved in 20 rounds.
[10]	train-auc:0.950888	val-auc:0.915218
[20]	train-auc:0.958518	val-auc:0.917091
[30]	train-auc:0.965207	val-auc:0.916872
[40]	train-auc:0.971868	val-auc:0.91757
[50]	train-auc:0.976722	val-auc:0.916873
Stopping. Best iteration:
[38]	train-auc:0.97031	val-auc:0.917925

xgb mcc: 0.45915845666
the auc is 0.916663247134
the best threshold is 0.358381
the auc is 0.91498965044
rf mcc: 0.423534725103
the best threshold is 0.276160953103
final mcc: 0.460069334747
the auc is 0.918857841731
the best threshold is 0.245253678607
this is fold 4
[0]	train-auc:0.923586	val-auc:0.909091
Multiple eval metrics have been passed: 'val-auc' will be used for early stopping.

Will train until val-auc hasn't improved in 20 rounds.
[10]	train-auc:0.950072	val-auc:0.917282
[20]	train-auc:0.95896	val-auc:0.917326
[30]	train-auc:0.965475	val-auc:0.919563
[40]	train-auc:0.971007	val-auc:0.920474
[50]	train-auc:0.976297	val-auc:0.920615
[60]	train-auc:0.979963	val-auc:0.920671
Stopping. Best iteration:
[48]	train-auc:0.975035	val-auc:0.921069

xgb mcc: 0.459276069907
the auc is 0.920906030909
the best threshold is 0.363669
the auc is 0.916086156537
rf mcc: 0.419541720116
the best threshold is 0.219814657797
final mcc: 0.460534382634
the auc is 0.92162211665
the best threshold is 0.298162550473
this is fold 5
[0]	train-auc:0.922693	val-auc:0.899163
Multiple eval metrics have been passed: 'val-auc' will be used for early stopping.

Will train until val-auc hasn't improved in 20 rounds.
[10]	train-auc:0.950395	val-auc:0.914481
[20]	train-auc:0.958676	val-auc:0.916748
[30]	train-auc:0.966051	val-auc:0.917782
[40]	train-auc:0.971922	val-auc:0.918362
[50]	train-auc:0.975667	val-auc:0.919088
[60]	train-auc:0.978723	val-auc:0.918926
[70]	train-auc:0.981174	val-auc:0.919735
[80]	train-auc:0.983041	val-auc:0.919886
[90]	train-auc:0.984323	val-auc:0.919917
Stopping. Best iteration:
[77]	train-auc:0.982447	val-auc:0.920059

xgb mcc: 0.475558627834
the auc is 0.91965351228
the best threshold is 0.403841
the auc is 0.911634433885
rf mcc: 0.425831229884
the best threshold is 0.195054352641
final mcc: 0.469787150307
the auc is 0.917531039727
the best threshold is 0.227725488677
In[4]: xgb_result_set1.to_csv('../stacking_new/level1_train_20161029_feature_set9.csv',index = False)
rf_result_set1.to_csv('../stacking_new/level1_train_20161029_feature_set10.csv',index = False)

In[5]: threshold3 = threshold3 / 5
threshold1 = threshold1 / 5
threshold2 = threshold2 / 5

In[6]: threshold3

Out[6]: 0.2986654535482875
In[7]: threshold1

Out[7]: 0.36629455685615542
In[8]: threshold2

Out[8]: 0.25897498341142178
In[9]: xgb_result_set1_test = xgb_result_set1_test/float(5)
rf_result_set1_test = rf_result_set1_test/float(5)
best_proba, best_mcc, y_pred = eval_mcc(train.Y.values, xgb_result_set1['pred'], True)
print("the xgb:",best_mcc)
best_proba, best_mcc, y_pred = eval_mcc(train.Y.values, rf_result_set1['pred'], True)
print("the rf:",best_mcc)
best_proba, best_mcc, y_pred = eval_mcc(train.Y.values, final_result_set1['pred'], True)
print("the xgb,rf:",best_mcc)

the xgb: 0.454820517003
the rf: 0.418200785656
the xgb,rf: 0.455850191208